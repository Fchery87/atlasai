name: Security Audit Report

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * 1' # weekly on Mondays

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit (JSON)
        run: |
          npm audit --json > audit-report.json || true

      - name: Run npm outdated
        run: |
          npm outdated || true
          npm outdated --json > outdated.json || true

      - name: Upload audit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-artifacts
          path: |
            audit-report.json
            outdated.json

      - name: Create/Update Security Audit Issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            function readJson(p) {
              try { return JSON.parse(fs.readFileSync(p, 'utf8')); } catch { return null; }
            }
            const audit = readJson('audit-report.json') || {};
            const advisories = audit?.advisories || {};
            const metadata = audit?.metadata || {};
            const totalVulns = metadata?.vulnerabilities ? Object.values(metadata.vulnerabilities).reduce((a,b)=>a+b,0) : 0;
            const outdated = readJson('outdated.json') || {};
            const lines = [];
            lines.push(`# Security Audit Report`);
            lines.push(`Total vulnerabilities: ${totalVulns}`);
            if (metadata?.vulnerabilities) {
              lines.push(`Breakdown: ${JSON.stringify(metadata.vulnerabilities)}`);
            }
            const keys = Object.keys(outdated);
            if (keys.length) {
              lines.push(``);
              lines.push(`## Outdated packages`);
              lines.push(`\n\`\`\`json\n${JSON.stringify(outdated, null, 2)}\n\`\`\``);
            }
            const body = lines.join('\n');
            // Try to find existing issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security'
            });
            let issueNumber = issues.find(i => i.title.includes('Security Audit Report'))?.number;
            if (issueNumber) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body
              });
            } else {
              const { data: issue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Security Audit Report`,
                body,
                labels: ['security']
              });
              issueNumber = issue.number;
            }
            core.setOutput('issue', issueNumber);